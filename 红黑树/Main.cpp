#include <iostream>
#include <ctime>
#include "RedBlackTree.h"
using namespace std;

int main()
{
	srand(time(NULL));
	RedBlackTree rbt;
	
	for (int i = 0; i < 10000; i++)
	{
		rbt.insert(rand()%1000);
	}
	//rbt.print();
	rbt.check();
	for (int i = 0; i < 5000; i++)
	{
		rbt.remove(rand() % 1000);
	}
	//rbt.print();
	rbt.check();

	RedBlackTree rbt2(rbt);
	rbt2.check();

	rbt2 = rbt;
	rbt2.check();

	cout << "min : " <<rbt2.findMin() << endl;
	cout << "max : " << rbt2.findMax() << endl;
	
	cout << rbt2.contains(1001) << endl;
	rbt2.insert(199);
	cout << rbt2.contains(199) << endl;
	system("pause");
	return 0;
}

/*
树的元素个数 : 10000
性质1：每个节点都是红色或者黑色。-- 检测结果：通过！
性质2：根节点是黑的。-- 检测结果：通过！
性质3：每个叶节点（NIL）是黑的。-- 检测结果：通过！
性质4：如果一个节点是红色的，两个子节点都是黑色。-- 检测结果：通过！
性质5：对于每个节点，从该节点到所有后代叶节点的简单路径均包含数目相同的黑色节点
。-- 检测结果：通过！
树的元素个数 : 5153
性质1：每个节点都是红色或者黑色。-- 检测结果：通过！
性质2：根节点是黑的。-- 检测结果：通过！
性质3：每个叶节点（NIL）是黑的。-- 检测结果：通过！
性质4：如果一个节点是红色的，两个子节点都是黑色。-- 检测结果：通过！
性质5：对于每个节点，从该节点到所有后代叶节点的简单路径均包含数目相同的黑色节点
。-- 检测结果：通过！
树的元素个数 : 5153
性质1：每个节点都是红色或者黑色。-- 检测结果：通过！
性质2：根节点是黑的。-- 检测结果：通过！
性质3：每个叶节点（NIL）是黑的。-- 检测结果：通过！
性质4：如果一个节点是红色的，两个子节点都是黑色。-- 检测结果：通过！
性质5：对于每个节点，从该节点到所有后代叶节点的简单路径均包含数目相同的黑色节点
。-- 检测结果：通过！
树的元素个数 : 5153
性质1：每个节点都是红色或者黑色。-- 检测结果：通过！
性质2：根节点是黑的。-- 检测结果：通过！
性质3：每个叶节点（NIL）是黑的。-- 检测结果：通过！
性质4：如果一个节点是红色的，两个子节点都是黑色。-- 检测结果：通过！
性质5：对于每个节点，从该节点到所有后代叶节点的简单路径均包含数目相同的黑色节点
。-- 检测结果：通过！
min : 0
max : 999
0
1
请按任意键继续. . .
*/